/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FusionMiner.Thrift
{
  public partial class ClientService {
    public interface Iface {
      string Ping();
      #if SILVERLIGHT
      IAsyncResult Begin_Ping(AsyncCallback callback, object state);
      string End_Ping(IAsyncResult asyncResult);
      #endif
      string Authenticate(string username, string password);
      #if SILVERLIGHT
      IAsyncResult Begin_Authenticate(AsyncCallback callback, object state, string username, string password);
      string End_Authenticate(IAsyncResult asyncResult);
      #endif
      List<MinerStatus> GetAllMiners(string authkey);
      #if SILVERLIGHT
      IAsyncResult Begin_GetAllMiners(AsyncCallback callback, object state, string authkey);
      List<MinerStatus> End_GetAllMiners(IAsyncResult asyncResult);
      #endif
      List<MinerStatus> GetMinerHistory(string authkey, long minerid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetMinerHistory(AsyncCallback callback, object state, string authkey, long minerid);
      List<MinerStatus> End_GetMinerHistory(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Ping(AsyncCallback callback, object state)
      {
        return send_Ping(callback, state);
      }

      public string End_Ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Ping();
      }

      #endif

      public string Ping()
      {
        #if !SILVERLIGHT
        send_Ping();
        return recv_Ping();

        #else
        var asyncResult = Begin_Ping(null, null);
        return End_Ping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Ping(AsyncCallback callback, object state)
      #else
      public void send_Ping()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Ping", TMessageType.Call, seqid_));
        Ping_args args = new Ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Ping_result result = new Ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Ping failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Authenticate(AsyncCallback callback, object state, string username, string password)
      {
        return send_Authenticate(callback, state, username, password);
      }

      public string End_Authenticate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Authenticate();
      }

      #endif

      public string Authenticate(string username, string password)
      {
        #if !SILVERLIGHT
        send_Authenticate(username, password);
        return recv_Authenticate();

        #else
        var asyncResult = Begin_Authenticate(null, null, username, password);
        return End_Authenticate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Authenticate(AsyncCallback callback, object state, string username, string password)
      #else
      public void send_Authenticate(string username, string password)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Authenticate", TMessageType.Call, seqid_));
        Authenticate_args args = new Authenticate_args();
        args.Username = username;
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Authenticate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Authenticate_result result = new Authenticate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Authenticate failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAllMiners(AsyncCallback callback, object state, string authkey)
      {
        return send_GetAllMiners(callback, state, authkey);
      }

      public List<MinerStatus> End_GetAllMiners(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAllMiners();
      }

      #endif

      public List<MinerStatus> GetAllMiners(string authkey)
      {
        #if !SILVERLIGHT
        send_GetAllMiners(authkey);
        return recv_GetAllMiners();

        #else
        var asyncResult = Begin_GetAllMiners(null, null, authkey);
        return End_GetAllMiners(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAllMiners(AsyncCallback callback, object state, string authkey)
      #else
      public void send_GetAllMiners(string authkey)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAllMiners", TMessageType.Call, seqid_));
        GetAllMiners_args args = new GetAllMiners_args();
        args.Authkey = authkey;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<MinerStatus> recv_GetAllMiners()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAllMiners_result result = new GetAllMiners_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAllMiners failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetMinerHistory(AsyncCallback callback, object state, string authkey, long minerid)
      {
        return send_GetMinerHistory(callback, state, authkey, minerid);
      }

      public List<MinerStatus> End_GetMinerHistory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetMinerHistory();
      }

      #endif

      public List<MinerStatus> GetMinerHistory(string authkey, long minerid)
      {
        #if !SILVERLIGHT
        send_GetMinerHistory(authkey, minerid);
        return recv_GetMinerHistory();

        #else
        var asyncResult = Begin_GetMinerHistory(null, null, authkey, minerid);
        return End_GetMinerHistory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetMinerHistory(AsyncCallback callback, object state, string authkey, long minerid)
      #else
      public void send_GetMinerHistory(string authkey, long minerid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetMinerHistory", TMessageType.Call, seqid_));
        GetMinerHistory_args args = new GetMinerHistory_args();
        args.Authkey = authkey;
        args.Minerid = minerid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<MinerStatus> recv_GetMinerHistory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetMinerHistory_result result = new GetMinerHistory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMinerHistory failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["Ping"] = Ping_Process;
        processMap_["Authenticate"] = Authenticate_Process;
        processMap_["GetAllMiners"] = GetAllMiners_Process;
        processMap_["GetMinerHistory"] = GetMinerHistory_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Ping_args args = new Ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Ping_result result = new Ping_result();
        result.Success = iface_.Ping();
        oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Authenticate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Authenticate_args args = new Authenticate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Authenticate_result result = new Authenticate_result();
        result.Success = iface_.Authenticate(args.Username, args.Password);
        oprot.WriteMessageBegin(new TMessage("Authenticate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAllMiners_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAllMiners_args args = new GetAllMiners_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAllMiners_result result = new GetAllMiners_result();
        result.Success = iface_.GetAllMiners(args.Authkey);
        oprot.WriteMessageBegin(new TMessage("GetAllMiners", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetMinerHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetMinerHistory_args args = new GetMinerHistory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetMinerHistory_result result = new GetMinerHistory_result();
        result.Success = iface_.GetMinerHistory(args.Authkey, args.Minerid);
        oprot.WriteMessageBegin(new TMessage("GetMinerHistory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_args : TBase
    {

      public Ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Ping_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ping_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Ping_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ping_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authenticate_args : TBase
    {
      private string _username;
      private string _password;

      public string Username
      {
        get
        {
          return _username;
        }
        set
        {
          __isset.username = true;
          this._username = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool username;
        public bool password;
      }

      public Authenticate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Authenticate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authenticate_args(");
        bool __first = true;
        if (Username != null && __isset.username) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Username: ");
          __sb.Append(Username);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Authenticate_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Authenticate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Authenticate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Authenticate_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAllMiners_args : TBase
    {
      private string _authkey;

      public string Authkey
      {
        get
        {
          return _authkey;
        }
        set
        {
          __isset.authkey = true;
          this._authkey = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool authkey;
      }

      public GetAllMiners_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Authkey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAllMiners_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Authkey != null && __isset.authkey) {
          field.Name = "authkey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Authkey);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAllMiners_args(");
        bool __first = true;
        if (Authkey != null && __isset.authkey) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Authkey: ");
          __sb.Append(Authkey);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAllMiners_result : TBase
    {
      private List<MinerStatus> _success;

      public List<MinerStatus> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAllMiners_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<MinerStatus>();
                  TList _list32 = iprot.ReadListBegin();
                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    MinerStatus _elem34 = new MinerStatus();
                    _elem34 = new MinerStatus();
                    _elem34.Read(iprot);
                    Success.Add(_elem34);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAllMiners_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (MinerStatus _iter35 in Success)
              {
                _iter35.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAllMiners_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMinerHistory_args : TBase
    {
      private string _authkey;
      private long _minerid;

      public string Authkey
      {
        get
        {
          return _authkey;
        }
        set
        {
          __isset.authkey = true;
          this._authkey = value;
        }
      }

      public long Minerid
      {
        get
        {
          return _minerid;
        }
        set
        {
          __isset.minerid = true;
          this._minerid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool authkey;
        public bool minerid;
      }

      public GetMinerHistory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Authkey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Minerid = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetMinerHistory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Authkey != null && __isset.authkey) {
          field.Name = "authkey";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Authkey);
          oprot.WriteFieldEnd();
        }
        if (__isset.minerid) {
          field.Name = "minerid";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Minerid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMinerHistory_args(");
        bool __first = true;
        if (Authkey != null && __isset.authkey) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Authkey: ");
          __sb.Append(Authkey);
        }
        if (__isset.minerid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Minerid: ");
          __sb.Append(Minerid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMinerHistory_result : TBase
    {
      private List<MinerStatus> _success;

      public List<MinerStatus> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetMinerHistory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<MinerStatus>();
                  TList _list36 = iprot.ReadListBegin();
                  for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                  {
                    MinerStatus _elem38 = new MinerStatus();
                    _elem38 = new MinerStatus();
                    _elem38.Read(iprot);
                    Success.Add(_elem38);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetMinerHistory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (MinerStatus _iter39 in Success)
              {
                _iter39.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMinerHistory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
