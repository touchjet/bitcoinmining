/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FusionMiner.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MaintStep : TBase
  {
    private MaintStepType _Type;
    private string _Path;
    private string _Command;
    private byte[] _FileData;
    private string _md5;

    /// <summary>
    /// 
    /// <seealso cref="MaintStepType"/>
    /// </summary>
    public MaintStepType Type
    {
      get
      {
        return _Type;
      }
      set
      {
        __isset.Type = true;
        this._Type = value;
      }
    }

    public string Path
    {
      get
      {
        return _Path;
      }
      set
      {
        __isset.Path = true;
        this._Path = value;
      }
    }

    public string Command
    {
      get
      {
        return _Command;
      }
      set
      {
        __isset.Command = true;
        this._Command = value;
      }
    }

    public byte[] FileData
    {
      get
      {
        return _FileData;
      }
      set
      {
        __isset.FileData = true;
        this._FileData = value;
      }
    }

    public string Md5
    {
      get
      {
        return _md5;
      }
      set
      {
        __isset.md5 = true;
        this._md5 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Type;
      public bool Path;
      public bool Command;
      public bool FileData;
      public bool md5;
    }

    public MaintStep() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Type = (MaintStepType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Path = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Command = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              FileData = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Md5 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MaintStep");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.Type) {
        field.Name = "Type";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (Path != null && __isset.Path) {
        field.Name = "Path";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Path);
        oprot.WriteFieldEnd();
      }
      if (Command != null && __isset.Command) {
        field.Name = "Command";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Command);
        oprot.WriteFieldEnd();
      }
      if (FileData != null && __isset.FileData) {
        field.Name = "FileData";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(FileData);
        oprot.WriteFieldEnd();
      }
      if (Md5 != null && __isset.md5) {
        field.Name = "md5";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Md5);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MaintStep(");
      bool __first = true;
      if (__isset.Type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (Path != null && __isset.Path) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Path: ");
        __sb.Append(Path);
      }
      if (Command != null && __isset.Command) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Command: ");
        __sb.Append(Command);
      }
      if (FileData != null && __isset.FileData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FileData: ");
        __sb.Append(FileData);
      }
      if (Md5 != null && __isset.md5) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Md5: ");
        __sb.Append(Md5);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
