/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FusionMiner.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Maintenance : TBase
  {
    private string _SoftwareVersion;
    private List<MaintStep> _Steps;
    private string _Checksum;

    public string SoftwareVersion
    {
      get
      {
        return _SoftwareVersion;
      }
      set
      {
        __isset.SoftwareVersion = true;
        this._SoftwareVersion = value;
      }
    }

    public List<MaintStep> Steps
    {
      get
      {
        return _Steps;
      }
      set
      {
        __isset.Steps = true;
        this._Steps = value;
      }
    }

    public string Checksum
    {
      get
      {
        return _Checksum;
      }
      set
      {
        __isset.Checksum = true;
        this._Checksum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool SoftwareVersion;
      public bool Steps;
      public bool Checksum;
    }

    public Maintenance() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              SoftwareVersion = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Steps = new List<MaintStep>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  MaintStep _elem2 = new MaintStep();
                  _elem2 = new MaintStep();
                  _elem2.Read(iprot);
                  Steps.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Checksum = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Maintenance");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SoftwareVersion != null && __isset.SoftwareVersion) {
        field.Name = "SoftwareVersion";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SoftwareVersion);
        oprot.WriteFieldEnd();
      }
      if (Steps != null && __isset.Steps) {
        field.Name = "Steps";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Steps.Count));
          foreach (MaintStep _iter3 in Steps)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Checksum != null && __isset.Checksum) {
        field.Name = "Checksum";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Checksum);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Maintenance(");
      bool __first = true;
      if (SoftwareVersion != null && __isset.SoftwareVersion) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SoftwareVersion: ");
        __sb.Append(SoftwareVersion);
      }
      if (Steps != null && __isset.Steps) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Steps: ");
        __sb.Append(Steps);
      }
      if (Checksum != null && __isset.Checksum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Checksum: ");
        __sb.Append(Checksum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
