/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FusionMiner.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MinerConfig : TBase
  {
    private string _MAC;
    private long _UniqueId;
    private string _NickName;
    private string _Version;
    private List<PoolConfig> _Pools;
    private PoolStrategyType _PoolStrategy;
    private List<HardwareConfig> _Hardwares;
    private NetworkConfig _WiredNetwork;
    private NetworkConfig _WirelessNetwork;
    private string _Password;
    private string _SN;

    public string MAC
    {
      get
      {
        return _MAC;
      }
      set
      {
        __isset.MAC = true;
        this._MAC = value;
      }
    }

    public long UniqueId
    {
      get
      {
        return _UniqueId;
      }
      set
      {
        __isset.UniqueId = true;
        this._UniqueId = value;
      }
    }

    public string NickName
    {
      get
      {
        return _NickName;
      }
      set
      {
        __isset.NickName = true;
        this._NickName = value;
      }
    }

    public string Version
    {
      get
      {
        return _Version;
      }
      set
      {
        __isset.Version = true;
        this._Version = value;
      }
    }

    public List<PoolConfig> Pools
    {
      get
      {
        return _Pools;
      }
      set
      {
        __isset.Pools = true;
        this._Pools = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="PoolStrategyType"/>
    /// </summary>
    public PoolStrategyType PoolStrategy
    {
      get
      {
        return _PoolStrategy;
      }
      set
      {
        __isset.PoolStrategy = true;
        this._PoolStrategy = value;
      }
    }

    public List<HardwareConfig> Hardwares
    {
      get
      {
        return _Hardwares;
      }
      set
      {
        __isset.Hardwares = true;
        this._Hardwares = value;
      }
    }

    public NetworkConfig WiredNetwork
    {
      get
      {
        return _WiredNetwork;
      }
      set
      {
        __isset.WiredNetwork = true;
        this._WiredNetwork = value;
      }
    }

    public NetworkConfig WirelessNetwork
    {
      get
      {
        return _WirelessNetwork;
      }
      set
      {
        __isset.WirelessNetwork = true;
        this._WirelessNetwork = value;
      }
    }

    public string Password
    {
      get
      {
        return _Password;
      }
      set
      {
        __isset.Password = true;
        this._Password = value;
      }
    }

    public string SN
    {
      get
      {
        return _SN;
      }
      set
      {
        __isset.SN = true;
        this._SN = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool MAC;
      public bool UniqueId;
      public bool NickName;
      public bool Version;
      public bool Pools;
      public bool PoolStrategy;
      public bool Hardwares;
      public bool WiredNetwork;
      public bool WirelessNetwork;
      public bool Password;
      public bool SN;
    }

    public MinerConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              MAC = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              UniqueId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              NickName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Version = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                Pools = new List<PoolConfig>();
                TList _list24 = iprot.ReadListBegin();
                for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                {
                  PoolConfig _elem26 = new PoolConfig();
                  _elem26 = new PoolConfig();
                  _elem26.Read(iprot);
                  Pools.Add(_elem26);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              PoolStrategy = (PoolStrategyType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                Hardwares = new List<HardwareConfig>();
                TList _list27 = iprot.ReadListBegin();
                for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                {
                  HardwareConfig _elem29 = new HardwareConfig();
                  _elem29 = new HardwareConfig();
                  _elem29.Read(iprot);
                  Hardwares.Add(_elem29);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              WiredNetwork = new NetworkConfig();
              WiredNetwork.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              WirelessNetwork = new NetworkConfig();
              WirelessNetwork.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Password = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              SN = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MinerConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (MAC != null && __isset.MAC) {
        field.Name = "MAC";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MAC);
        oprot.WriteFieldEnd();
      }
      if (__isset.UniqueId) {
        field.Name = "UniqueId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UniqueId);
        oprot.WriteFieldEnd();
      }
      if (NickName != null && __isset.NickName) {
        field.Name = "NickName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NickName);
        oprot.WriteFieldEnd();
      }
      if (Version != null && __isset.Version) {
        field.Name = "Version";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Version);
        oprot.WriteFieldEnd();
      }
      if (Pools != null && __isset.Pools) {
        field.Name = "Pools";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Pools.Count));
          foreach (PoolConfig _iter30 in Pools)
          {
            _iter30.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.PoolStrategy) {
        field.Name = "PoolStrategy";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)PoolStrategy);
        oprot.WriteFieldEnd();
      }
      if (Hardwares != null && __isset.Hardwares) {
        field.Name = "Hardwares";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Hardwares.Count));
          foreach (HardwareConfig _iter31 in Hardwares)
          {
            _iter31.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (WiredNetwork != null && __isset.WiredNetwork) {
        field.Name = "WiredNetwork";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        WiredNetwork.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (WirelessNetwork != null && __isset.WirelessNetwork) {
        field.Name = "WirelessNetwork";
        field.Type = TType.Struct;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        WirelessNetwork.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Password != null && __isset.Password) {
        field.Name = "Password";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Password);
        oprot.WriteFieldEnd();
      }
      if (SN != null && __isset.SN) {
        field.Name = "SN";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SN);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MinerConfig(");
      bool __first = true;
      if (MAC != null && __isset.MAC) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MAC: ");
        __sb.Append(MAC);
      }
      if (__isset.UniqueId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UniqueId: ");
        __sb.Append(UniqueId);
      }
      if (NickName != null && __isset.NickName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NickName: ");
        __sb.Append(NickName);
      }
      if (Version != null && __isset.Version) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Version: ");
        __sb.Append(Version);
      }
      if (Pools != null && __isset.Pools) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pools: ");
        __sb.Append(Pools);
      }
      if (__isset.PoolStrategy) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PoolStrategy: ");
        __sb.Append(PoolStrategy);
      }
      if (Hardwares != null && __isset.Hardwares) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Hardwares: ");
        __sb.Append(Hardwares);
      }
      if (WiredNetwork != null && __isset.WiredNetwork) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WiredNetwork: ");
        __sb.Append(WiredNetwork== null ? "<null>" : WiredNetwork.ToString());
      }
      if (WirelessNetwork != null && __isset.WirelessNetwork) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WirelessNetwork: ");
        __sb.Append(WirelessNetwork== null ? "<null>" : WirelessNetwork.ToString());
      }
      if (Password != null && __isset.Password) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Password: ");
        __sb.Append(Password);
      }
      if (SN != null && __isset.SN) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SN: ");
        __sb.Append(SN);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
