/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FusionMiner.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MinerDetail : TBase
  {
    private MinerStatus _Status;
    private List<HardwareStatus> _Hardware;
    private List<PoolStatus> _Pool;

    public MinerStatus Status
    {
      get
      {
        return _Status;
      }
      set
      {
        __isset.Status = true;
        this._Status = value;
      }
    }

    public List<HardwareStatus> Hardware
    {
      get
      {
        return _Hardware;
      }
      set
      {
        __isset.Hardware = true;
        this._Hardware = value;
      }
    }

    public List<PoolStatus> Pool
    {
      get
      {
        return _Pool;
      }
      set
      {
        __isset.Pool = true;
        this._Pool = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Status;
      public bool Hardware;
      public bool Pool;
    }

    public MinerDetail() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Status = new MinerStatus();
              Status.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Hardware = new List<HardwareStatus>();
                TList _list16 = iprot.ReadListBegin();
                for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                {
                  HardwareStatus _elem18 = new HardwareStatus();
                  _elem18 = new HardwareStatus();
                  _elem18.Read(iprot);
                  Hardware.Add(_elem18);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Pool = new List<PoolStatus>();
                TList _list19 = iprot.ReadListBegin();
                for( int _i20 = 0; _i20 < _list19.Count; ++_i20)
                {
                  PoolStatus _elem21 = new PoolStatus();
                  _elem21 = new PoolStatus();
                  _elem21.Read(iprot);
                  Pool.Add(_elem21);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MinerDetail");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Status != null && __isset.Status) {
        field.Name = "Status";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Status.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Hardware != null && __isset.Hardware) {
        field.Name = "Hardware";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Hardware.Count));
          foreach (HardwareStatus _iter22 in Hardware)
          {
            _iter22.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Pool != null && __isset.Pool) {
        field.Name = "Pool";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Pool.Count));
          foreach (PoolStatus _iter23 in Pool)
          {
            _iter23.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MinerDetail(");
      bool __first = true;
      if (Status != null && __isset.Status) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Status: ");
        __sb.Append(Status== null ? "<null>" : Status.ToString());
      }
      if (Hardware != null && __isset.Hardware) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Hardware: ");
        __sb.Append(Hardware);
      }
      if (Pool != null && __isset.Pool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pool: ");
        __sb.Append(Pool);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
