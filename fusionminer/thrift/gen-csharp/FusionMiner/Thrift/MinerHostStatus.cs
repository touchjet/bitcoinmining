/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FusionMiner.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MinerHostStatus : TBase
  {
    private long _UniqueId;
    private int _Utc;
    private long _NonceFound;
    private long _HardwareError;
    private int _SpeedAvg;
    private int _SpeedCur;
    private double _MaxTempBoard;
    private double _MaxTempChip;
    private string _LocalIP;
    private string _RemoteIP;

    public long UniqueId
    {
      get
      {
        return _UniqueId;
      }
      set
      {
        __isset.UniqueId = true;
        this._UniqueId = value;
      }
    }

    public int Utc
    {
      get
      {
        return _Utc;
      }
      set
      {
        __isset.Utc = true;
        this._Utc = value;
      }
    }

    public long NonceFound
    {
      get
      {
        return _NonceFound;
      }
      set
      {
        __isset.NonceFound = true;
        this._NonceFound = value;
      }
    }

    public long HardwareError
    {
      get
      {
        return _HardwareError;
      }
      set
      {
        __isset.HardwareError = true;
        this._HardwareError = value;
      }
    }

    public int SpeedAvg
    {
      get
      {
        return _SpeedAvg;
      }
      set
      {
        __isset.SpeedAvg = true;
        this._SpeedAvg = value;
      }
    }

    public int SpeedCur
    {
      get
      {
        return _SpeedCur;
      }
      set
      {
        __isset.SpeedCur = true;
        this._SpeedCur = value;
      }
    }

    public double MaxTempBoard
    {
      get
      {
        return _MaxTempBoard;
      }
      set
      {
        __isset.MaxTempBoard = true;
        this._MaxTempBoard = value;
      }
    }

    public double MaxTempChip
    {
      get
      {
        return _MaxTempChip;
      }
      set
      {
        __isset.MaxTempChip = true;
        this._MaxTempChip = value;
      }
    }

    public string LocalIP
    {
      get
      {
        return _LocalIP;
      }
      set
      {
        __isset.LocalIP = true;
        this._LocalIP = value;
      }
    }

    public string RemoteIP
    {
      get
      {
        return _RemoteIP;
      }
      set
      {
        __isset.RemoteIP = true;
        this._RemoteIP = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool UniqueId;
      public bool Utc;
      public bool NonceFound;
      public bool HardwareError;
      public bool SpeedAvg;
      public bool SpeedCur;
      public bool MaxTempBoard;
      public bool MaxTempChip;
      public bool LocalIP;
      public bool RemoteIP;
    }

    public MinerHostStatus() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              UniqueId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Utc = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              NonceFound = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              HardwareError = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              SpeedAvg = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              SpeedCur = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              MaxTempBoard = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              MaxTempChip = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              LocalIP = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              RemoteIP = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MinerHostStatus");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.UniqueId) {
        field.Name = "UniqueId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UniqueId);
        oprot.WriteFieldEnd();
      }
      if (__isset.Utc) {
        field.Name = "Utc";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Utc);
        oprot.WriteFieldEnd();
      }
      if (__isset.NonceFound) {
        field.Name = "NonceFound";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NonceFound);
        oprot.WriteFieldEnd();
      }
      if (__isset.HardwareError) {
        field.Name = "HardwareError";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(HardwareError);
        oprot.WriteFieldEnd();
      }
      if (__isset.SpeedAvg) {
        field.Name = "SpeedAvg";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SpeedAvg);
        oprot.WriteFieldEnd();
      }
      if (__isset.SpeedCur) {
        field.Name = "SpeedCur";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SpeedCur);
        oprot.WriteFieldEnd();
      }
      if (__isset.MaxTempBoard) {
        field.Name = "MaxTempBoard";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(MaxTempBoard);
        oprot.WriteFieldEnd();
      }
      if (__isset.MaxTempChip) {
        field.Name = "MaxTempChip";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(MaxTempChip);
        oprot.WriteFieldEnd();
      }
      if (LocalIP != null && __isset.LocalIP) {
        field.Name = "LocalIP";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LocalIP);
        oprot.WriteFieldEnd();
      }
      if (RemoteIP != null && __isset.RemoteIP) {
        field.Name = "RemoteIP";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RemoteIP);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MinerHostStatus(");
      bool __first = true;
      if (__isset.UniqueId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UniqueId: ");
        __sb.Append(UniqueId);
      }
      if (__isset.Utc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Utc: ");
        __sb.Append(Utc);
      }
      if (__isset.NonceFound) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NonceFound: ");
        __sb.Append(NonceFound);
      }
      if (__isset.HardwareError) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HardwareError: ");
        __sb.Append(HardwareError);
      }
      if (__isset.SpeedAvg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SpeedAvg: ");
        __sb.Append(SpeedAvg);
      }
      if (__isset.SpeedCur) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SpeedCur: ");
        __sb.Append(SpeedCur);
      }
      if (__isset.MaxTempBoard) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxTempBoard: ");
        __sb.Append(MaxTempBoard);
      }
      if (__isset.MaxTempChip) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxTempChip: ");
        __sb.Append(MaxTempChip);
      }
      if (LocalIP != null && __isset.LocalIP) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocalIP: ");
        __sb.Append(LocalIP);
      }
      if (RemoteIP != null && __isset.RemoteIP) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RemoteIP: ");
        __sb.Append(RemoteIP);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
