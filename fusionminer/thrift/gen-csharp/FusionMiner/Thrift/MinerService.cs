/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FusionMiner.Thrift
{
  public partial class MinerService {
    public interface Iface {
      string Ping();
      #if SILVERLIGHT
      IAsyncResult Begin_Ping(AsyncCallback callback, object state);
      string End_Ping(IAsyncResult asyncResult);
      #endif
      bool Validate(string password);
      #if SILVERLIGHT
      IAsyncResult Begin_Validate(AsyncCallback callback, object state, string password);
      bool End_Validate(IAsyncResult asyncResult);
      #endif
      MinerStatus GetStatus();
      #if SILVERLIGHT
      IAsyncResult Begin_GetStatus(AsyncCallback callback, object state);
      MinerStatus End_GetStatus(IAsyncResult asyncResult);
      #endif
      MinerDetail GetDetail();
      #if SILVERLIGHT
      IAsyncResult Begin_GetDetail(AsyncCallback callback, object state);
      MinerDetail End_GetDetail(IAsyncResult asyncResult);
      #endif
      MinerConfig GetConfig();
      #if SILVERLIGHT
      IAsyncResult Begin_GetConfig(AsyncCallback callback, object state);
      MinerConfig End_GetConfig(IAsyncResult asyncResult);
      #endif
      void SetConfig(MinerConfig config);
      #if SILVERLIGHT
      IAsyncResult Begin_SetConfig(AsyncCallback callback, object state, MinerConfig config);
      void End_SetConfig(IAsyncResult asyncResult);
      #endif
      void Blink();
      #if SILVERLIGHT
      IAsyncResult Begin_Blink(AsyncCallback callback, object state);
      void End_Blink(IAsyncResult asyncResult);
      #endif
      string GetLog();
      #if SILVERLIGHT
      IAsyncResult Begin_GetLog(AsyncCallback callback, object state);
      string End_GetLog(IAsyncResult asyncResult);
      #endif
      void Shutdown();
      #if SILVERLIGHT
      IAsyncResult Begin_Shutdown(AsyncCallback callback, object state);
      void End_Shutdown(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Ping(AsyncCallback callback, object state)
      {
        return send_Ping(callback, state);
      }

      public string End_Ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Ping();
      }

      #endif

      public string Ping()
      {
        #if !SILVERLIGHT
        send_Ping();
        return recv_Ping();

        #else
        var asyncResult = Begin_Ping(null, null);
        return End_Ping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Ping(AsyncCallback callback, object state)
      #else
      public void send_Ping()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Ping", TMessageType.Call, seqid_));
        Ping_args args = new Ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Ping_result result = new Ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Ping failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Validate(AsyncCallback callback, object state, string password)
      {
        return send_Validate(callback, state, password);
      }

      public bool End_Validate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Validate();
      }

      #endif

      public bool Validate(string password)
      {
        #if !SILVERLIGHT
        send_Validate(password);
        return recv_Validate();

        #else
        var asyncResult = Begin_Validate(null, null, password);
        return End_Validate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Validate(AsyncCallback callback, object state, string password)
      #else
      public void send_Validate(string password)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Validate", TMessageType.Call, seqid_));
        Validate_args args = new Validate_args();
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Validate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Validate_result result = new Validate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Validate failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetStatus(AsyncCallback callback, object state)
      {
        return send_GetStatus(callback, state);
      }

      public MinerStatus End_GetStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetStatus();
      }

      #endif

      public MinerStatus GetStatus()
      {
        #if !SILVERLIGHT
        send_GetStatus();
        return recv_GetStatus();

        #else
        var asyncResult = Begin_GetStatus(null, null);
        return End_GetStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetStatus(AsyncCallback callback, object state)
      #else
      public void send_GetStatus()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetStatus", TMessageType.Call, seqid_));
        GetStatus_args args = new GetStatus_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public MinerStatus recv_GetStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetStatus_result result = new GetStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetDetail(AsyncCallback callback, object state)
      {
        return send_GetDetail(callback, state);
      }

      public MinerDetail End_GetDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetDetail();
      }

      #endif

      public MinerDetail GetDetail()
      {
        #if !SILVERLIGHT
        send_GetDetail();
        return recv_GetDetail();

        #else
        var asyncResult = Begin_GetDetail(null, null);
        return End_GetDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetDetail(AsyncCallback callback, object state)
      #else
      public void send_GetDetail()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetDetail", TMessageType.Call, seqid_));
        GetDetail_args args = new GetDetail_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public MinerDetail recv_GetDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDetail_result result = new GetDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetConfig(AsyncCallback callback, object state)
      {
        return send_GetConfig(callback, state);
      }

      public MinerConfig End_GetConfig(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetConfig();
      }

      #endif

      public MinerConfig GetConfig()
      {
        #if !SILVERLIGHT
        send_GetConfig();
        return recv_GetConfig();

        #else
        var asyncResult = Begin_GetConfig(null, null);
        return End_GetConfig(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetConfig(AsyncCallback callback, object state)
      #else
      public void send_GetConfig()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetConfig", TMessageType.Call, seqid_));
        GetConfig_args args = new GetConfig_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public MinerConfig recv_GetConfig()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetConfig_result result = new GetConfig_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetConfig failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SetConfig(AsyncCallback callback, object state, MinerConfig config)
      {
        return send_SetConfig(callback, state, config);
      }

      public void End_SetConfig(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SetConfig();
      }

      #endif

      public void SetConfig(MinerConfig config)
      {
        #if !SILVERLIGHT
        send_SetConfig(config);
        recv_SetConfig();

        #else
        var asyncResult = Begin_SetConfig(null, null, config);
        End_SetConfig(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetConfig(AsyncCallback callback, object state, MinerConfig config)
      #else
      public void send_SetConfig(MinerConfig config)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SetConfig", TMessageType.Call, seqid_));
        SetConfig_args args = new SetConfig_args();
        args.Config = config;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_SetConfig()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetConfig_result result = new SetConfig_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Blink(AsyncCallback callback, object state)
      {
        return send_Blink(callback, state);
      }

      public void End_Blink(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Blink();
      }

      #endif

      public void Blink()
      {
        #if !SILVERLIGHT
        send_Blink();
        recv_Blink();

        #else
        var asyncResult = Begin_Blink(null, null);
        End_Blink(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Blink(AsyncCallback callback, object state)
      #else
      public void send_Blink()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Blink", TMessageType.Call, seqid_));
        Blink_args args = new Blink_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Blink()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Blink_result result = new Blink_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetLog(AsyncCallback callback, object state)
      {
        return send_GetLog(callback, state);
      }

      public string End_GetLog(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetLog();
      }

      #endif

      public string GetLog()
      {
        #if !SILVERLIGHT
        send_GetLog();
        return recv_GetLog();

        #else
        var asyncResult = Begin_GetLog(null, null);
        return End_GetLog(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetLog(AsyncCallback callback, object state)
      #else
      public void send_GetLog()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetLog", TMessageType.Call, seqid_));
        GetLog_args args = new GetLog_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetLog()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetLog_result result = new GetLog_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetLog failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Shutdown(AsyncCallback callback, object state)
      {
        return send_Shutdown(callback, state);
      }

      public void End_Shutdown(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Shutdown();
      }

      #endif

      public void Shutdown()
      {
        #if !SILVERLIGHT
        send_Shutdown();
        recv_Shutdown();

        #else
        var asyncResult = Begin_Shutdown(null, null);
        End_Shutdown(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Shutdown(AsyncCallback callback, object state)
      #else
      public void send_Shutdown()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Shutdown", TMessageType.Call, seqid_));
        Shutdown_args args = new Shutdown_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Shutdown()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Shutdown_result result = new Shutdown_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["Ping"] = Ping_Process;
        processMap_["Validate"] = Validate_Process;
        processMap_["GetStatus"] = GetStatus_Process;
        processMap_["GetDetail"] = GetDetail_Process;
        processMap_["GetConfig"] = GetConfig_Process;
        processMap_["SetConfig"] = SetConfig_Process;
        processMap_["Blink"] = Blink_Process;
        processMap_["GetLog"] = GetLog_Process;
        processMap_["Shutdown"] = Shutdown_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Ping_args args = new Ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Ping_result result = new Ping_result();
        result.Success = iface_.Ping();
        oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Validate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Validate_args args = new Validate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Validate_result result = new Validate_result();
        result.Success = iface_.Validate(args.Password);
        oprot.WriteMessageBegin(new TMessage("Validate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetStatus_args args = new GetStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetStatus_result result = new GetStatus_result();
        result.Success = iface_.GetStatus();
        oprot.WriteMessageBegin(new TMessage("GetStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDetail_args args = new GetDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDetail_result result = new GetDetail_result();
        result.Success = iface_.GetDetail();
        oprot.WriteMessageBegin(new TMessage("GetDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetConfig_args args = new GetConfig_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetConfig_result result = new GetConfig_result();
        result.Success = iface_.GetConfig();
        oprot.WriteMessageBegin(new TMessage("GetConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetConfig_args args = new SetConfig_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetConfig_result result = new SetConfig_result();
        iface_.SetConfig(args.Config);
        oprot.WriteMessageBegin(new TMessage("SetConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Blink_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Blink_args args = new Blink_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Blink_result result = new Blink_result();
        iface_.Blink();
        oprot.WriteMessageBegin(new TMessage("Blink", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetLog_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetLog_args args = new GetLog_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetLog_result result = new GetLog_result();
        result.Success = iface_.GetLog();
        oprot.WriteMessageBegin(new TMessage("GetLog", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Shutdown_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Shutdown_args args = new Shutdown_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Shutdown_result result = new Shutdown_result();
        iface_.Shutdown();
        oprot.WriteMessageBegin(new TMessage("Shutdown", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_args : TBase
    {

      public Ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Ping_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ping_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Ping_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ping_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Validate_args : TBase
    {
      private string _password;

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool password;
      }

      public Validate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Validate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Validate_args(");
        bool __first = true;
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Validate_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Validate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Validate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Validate_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetStatus_args : TBase
    {

      public GetStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetStatus_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetStatus_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetStatus_result : TBase
    {
      private MinerStatus _success;

      public MinerStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new MinerStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetStatus_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDetail_args : TBase
    {

      public GetDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDetail_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetDetail_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDetail_result : TBase
    {
      private MinerDetail _success;

      public MinerDetail Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new MinerDetail();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetDetail_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetConfig_args : TBase
    {

      public GetConfig_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetConfig_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetConfig_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetConfig_result : TBase
    {
      private MinerConfig _success;

      public MinerConfig Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetConfig_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new MinerConfig();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetConfig_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetConfig_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetConfig_args : TBase
    {
      private MinerConfig _config;

      public MinerConfig Config
      {
        get
        {
          return _config;
        }
        set
        {
          __isset.config = true;
          this._config = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool config;
      }

      public SetConfig_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Config = new MinerConfig();
                Config.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetConfig_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Config != null && __isset.config) {
          field.Name = "config";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Config.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetConfig_args(");
        bool __first = true;
        if (Config != null && __isset.config) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Config: ");
          __sb.Append(Config== null ? "<null>" : Config.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetConfig_result : TBase
    {

      public SetConfig_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetConfig_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetConfig_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Blink_args : TBase
    {

      public Blink_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Blink_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Blink_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Blink_result : TBase
    {

      public Blink_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Blink_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Blink_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLog_args : TBase
    {

      public GetLog_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetLog_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetLog_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLog_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetLog_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetLog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetLog_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Shutdown_args : TBase
    {

      public Shutdown_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Shutdown_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Shutdown_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Shutdown_result : TBase
    {

      public Shutdown_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Shutdown_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Shutdown_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
