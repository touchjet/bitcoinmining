/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FusionMiner.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PoolConfig : TBase
  {
    private PoolType _Type;
    private string _Url;
    private int _Port;
    private string _UserName;
    private string _Password;
    private int _Quota;

    /// <summary>
    /// 
    /// <seealso cref="PoolType"/>
    /// </summary>
    public PoolType Type
    {
      get
      {
        return _Type;
      }
      set
      {
        __isset.Type = true;
        this._Type = value;
      }
    }

    public string Url
    {
      get
      {
        return _Url;
      }
      set
      {
        __isset.Url = true;
        this._Url = value;
      }
    }

    public int Port
    {
      get
      {
        return _Port;
      }
      set
      {
        __isset.Port = true;
        this._Port = value;
      }
    }

    public string UserName
    {
      get
      {
        return _UserName;
      }
      set
      {
        __isset.UserName = true;
        this._UserName = value;
      }
    }

    public string Password
    {
      get
      {
        return _Password;
      }
      set
      {
        __isset.Password = true;
        this._Password = value;
      }
    }

    public int Quota
    {
      get
      {
        return _Quota;
      }
      set
      {
        __isset.Quota = true;
        this._Quota = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Type;
      public bool Url;
      public bool Port;
      public bool UserName;
      public bool Password;
      public bool Quota;
    }

    public PoolConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Type = (PoolType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Url = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Port = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Password = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Quota = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PoolConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.Type) {
        field.Name = "Type";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (Url != null && __isset.Url) {
        field.Name = "Url";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Url);
        oprot.WriteFieldEnd();
      }
      if (__isset.Port) {
        field.Name = "Port";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Port);
        oprot.WriteFieldEnd();
      }
      if (UserName != null && __isset.UserName) {
        field.Name = "UserName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (Password != null && __isset.Password) {
        field.Name = "Password";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Password);
        oprot.WriteFieldEnd();
      }
      if (__isset.Quota) {
        field.Name = "Quota";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Quota);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PoolConfig(");
      bool __first = true;
      if (__isset.Type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (Url != null && __isset.Url) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Url: ");
        __sb.Append(Url);
      }
      if (__isset.Port) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Port: ");
        __sb.Append(Port);
      }
      if (UserName != null && __isset.UserName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserName: ");
        __sb.Append(UserName);
      }
      if (Password != null && __isset.Password) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Password: ");
        __sb.Append(Password);
      }
      if (__isset.Quota) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Quota: ");
        __sb.Append(Quota);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
