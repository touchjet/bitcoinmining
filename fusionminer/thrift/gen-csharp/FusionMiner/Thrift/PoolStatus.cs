/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FusionMiner.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PoolStatus : TBase
  {
    private string _Url;
    private string _UserName;
    private bool _Alive;
    private long _Accepted;
    private long _Rejected;
    private long _Stale;
    private double _Difficulty;

    public string Url
    {
      get
      {
        return _Url;
      }
      set
      {
        __isset.Url = true;
        this._Url = value;
      }
    }

    public string UserName
    {
      get
      {
        return _UserName;
      }
      set
      {
        __isset.UserName = true;
        this._UserName = value;
      }
    }

    public bool Alive
    {
      get
      {
        return _Alive;
      }
      set
      {
        __isset.Alive = true;
        this._Alive = value;
      }
    }

    public long Accepted
    {
      get
      {
        return _Accepted;
      }
      set
      {
        __isset.Accepted = true;
        this._Accepted = value;
      }
    }

    public long Rejected
    {
      get
      {
        return _Rejected;
      }
      set
      {
        __isset.Rejected = true;
        this._Rejected = value;
      }
    }

    public long Stale
    {
      get
      {
        return _Stale;
      }
      set
      {
        __isset.Stale = true;
        this._Stale = value;
      }
    }

    public double Difficulty
    {
      get
      {
        return _Difficulty;
      }
      set
      {
        __isset.Difficulty = true;
        this._Difficulty = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Url;
      public bool UserName;
      public bool Alive;
      public bool Accepted;
      public bool Rejected;
      public bool Stale;
      public bool Difficulty;
    }

    public PoolStatus() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Url = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              Alive = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Accepted = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              Rejected = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              Stale = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              Difficulty = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PoolStatus");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Url != null && __isset.Url) {
        field.Name = "Url";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Url);
        oprot.WriteFieldEnd();
      }
      if (UserName != null && __isset.UserName) {
        field.Name = "UserName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (__isset.Alive) {
        field.Name = "Alive";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Alive);
        oprot.WriteFieldEnd();
      }
      if (__isset.Accepted) {
        field.Name = "Accepted";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Accepted);
        oprot.WriteFieldEnd();
      }
      if (__isset.Rejected) {
        field.Name = "Rejected";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Rejected);
        oprot.WriteFieldEnd();
      }
      if (__isset.Stale) {
        field.Name = "Stale";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Stale);
        oprot.WriteFieldEnd();
      }
      if (__isset.Difficulty) {
        field.Name = "Difficulty";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Difficulty);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PoolStatus(");
      bool __first = true;
      if (Url != null && __isset.Url) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Url: ");
        __sb.Append(Url);
      }
      if (UserName != null && __isset.UserName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserName: ");
        __sb.Append(UserName);
      }
      if (__isset.Alive) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Alive: ");
        __sb.Append(Alive);
      }
      if (__isset.Accepted) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Accepted: ");
        __sb.Append(Accepted);
      }
      if (__isset.Rejected) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rejected: ");
        __sb.Append(Rejected);
      }
      if (__isset.Stale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Stale: ");
        __sb.Append(Stale);
      }
      if (__isset.Difficulty) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Difficulty: ");
        __sb.Append(Difficulty);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
